INSERT INTO bayes_scores 
SELECT
	domainName,
	(CASE WHEN nr_pages >= 0.5 THEN 1.0 ELSE 0.0 END) AS nr_pages,
	(CASE WHEN url_type >= 0.5 THEN 1.0 ELSE 0.0 END) AS url_type,
	(CASE WHEN average_depth_level >= 0.5 THEN 1.0 ELSE 0.0 END) AS average_depth_level,
	(CASE WHEN average_url_length >= 0.5 THEN 1.0 ELSE 0.0 END) AS average_url_length,
	(CASE WHEN domain_age >= 0.5 THEN 1.0 ELSE 0.0 END) AS domain_age,
	(CASE WHEN domain_reservation_duration >= 0.5 THEN 1.0 ELSE 0.0 END) AS domain_reservation_duration,
	(CASE WHEN whois_private >= 0.5 THEN 1.0 ELSE 0.0 END) AS whois_private,
	(CASE WHEN dps >= 0.5 THEN 1.0 ELSE 0.0 END) AS dps,
	(CASE WHEN page_rank >= 0.5 THEN 1.0 ELSE 0.0 END) AS page_rank,
	(CASE WHEN average_content_size >= 0.5 THEN 1.0 ELSE 0.0 END) AS average_content_size,
	(CASE WHEN outbound_hyperlinks >= 0.5 THEN 1.0 ELSE 0.0 END) AS outbound_hyperlinks,
	(CASE WHEN category_specific_dictionary >= 0.5 THEN 1.0 ELSE 0.0 END) AS category_specific_dictionary,
	(CASE WHEN resolver_indication >= 0.5 THEN 1.0 ELSE 0.0 END) AS resolver_indication,
	(CASE WHEN terms_of_services_page >= 0.5 THEN 1.0 ELSE 0.0 END) AS terms_of_services_page,
	(CASE WHEN login_form_depth_level >= 0.5 THEN 1.0 ELSE 0.0 END) AS login_form_depth_level
FROM
	scores


# number of booter/non-booter URLs in dataset
SELECT count(domainName) FROM urls WHERE [booter?] = 'Y' AND status != 'off'
SELECT count(domainName) FROM urls WHERE [booter?] != 'Y' AND status != 'off'


# get number of characteristics that are true for booters/non-booters
SELECT 
	urls.[booter?], count(nr_pages)
FROM bayes_scores
INNER JOIN urls
ON bayes_scores.domainName = urls.domainName
WHERE 
	urls.status = 'on'
 	AND nr_pages = 1.0
GROUP BY urls.[booter?]

# gets the number of 'real' characteristics and not the -1.0 to put everything into perspective
SELECT count(scores.page_rank)
FROM scores
INNER JOIN urls
ON scores.domainName = urls.domainName
WHERE 
	urls.status = 'on'
 	AND page_rank != -1.0
GROUP BY urls.[booter?]


# get scores of single characteristic of all online Booter websites
SELECT urls.domainName, scores.page_rank FROM urls INNER JOIN scores ON urls.domainName = scores.domainName WHERE urls.[booter?] = 'Y' AND urls.status = 'on'
ORDER BY lastUpdate DESC




